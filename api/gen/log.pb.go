// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: log.proto

package log

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogEntry struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Command              string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	ExitCode             int32                  `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Timestamp            int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Shell_PID            int32                  `protobuf:"varint,4,opt,name=shell_PID,json=shellPID,proto3" json:"shell_PID,omitempty"`
	ShellUptime          int64                  `protobuf:"varint,5,opt,name=shell_uptime,json=shellUptime,proto3" json:"shell_uptime,omitempty"`
	WorkingDirectory     string                 `protobuf:"bytes,6,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	PrevWorkingDirectory string                 `protobuf:"bytes,7,opt,name=prev_working_directory,json=prevWorkingDirectory,proto3" json:"prev_working_directory,omitempty"`
	User                 string                 `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	EUID                 int32                  `protobuf:"varint,9,opt,name=EUID,proto3" json:"EUID,omitempty"`
	Term                 string                 `protobuf:"bytes,10,opt,name=term,proto3" json:"term,omitempty"`
	Hostname             string                 `protobuf:"bytes,11,opt,name=hostname,proto3" json:"hostname,omitempty"`
	SSHClient            string                 `protobuf:"bytes,12,opt,name=SSH_client,json=SSHClient,proto3" json:"SSH_client,omitempty"`
	TTY                  string                 `protobuf:"bytes,13,opt,name=TTY,proto3" json:"TTY,omitempty"`
	IsGitRepo            bool                   `protobuf:"varint,14,opt,name=is_git_repo,json=isGitRepo,proto3" json:"is_git_repo,omitempty"`
	GitRepoRoot          string                 `protobuf:"bytes,15,opt,name=git_repo_root,json=gitRepoRoot,proto3" json:"git_repo_root,omitempty"`
	GitBranch            string                 `protobuf:"bytes,16,opt,name=git_branch,json=gitBranch,proto3" json:"git_branch,omitempty"`
	GitCommit            string                 `protobuf:"bytes,17,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	GitStatus            string                 `protobuf:"bytes,18,opt,name=git_status,json=gitStatus,proto3" json:"git_status,omitempty"`
	LoggedSuccessfully   bool                   `protobuf:"varint,19,opt,name=logged_successfully,json=loggedSuccessfully,proto3" json:"logged_successfully,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogEntry) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *LogEntry) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *LogEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogEntry) GetShell_PID() int32 {
	if x != nil {
		return x.Shell_PID
	}
	return 0
}

func (x *LogEntry) GetShellUptime() int64 {
	if x != nil {
		return x.ShellUptime
	}
	return 0
}

func (x *LogEntry) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *LogEntry) GetPrevWorkingDirectory() string {
	if x != nil {
		return x.PrevWorkingDirectory
	}
	return ""
}

func (x *LogEntry) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *LogEntry) GetEUID() int32 {
	if x != nil {
		return x.EUID
	}
	return 0
}

func (x *LogEntry) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *LogEntry) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *LogEntry) GetSSHClient() string {
	if x != nil {
		return x.SSHClient
	}
	return ""
}

func (x *LogEntry) GetTTY() string {
	if x != nil {
		return x.TTY
	}
	return ""
}

func (x *LogEntry) GetIsGitRepo() bool {
	if x != nil {
		return x.IsGitRepo
	}
	return false
}

func (x *LogEntry) GetGitRepoRoot() string {
	if x != nil {
		return x.GitRepoRoot
	}
	return ""
}

func (x *LogEntry) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *LogEntry) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *LogEntry) GetGitStatus() string {
	if x != nil {
		return x.GitStatus
	}
	return ""
}

func (x *LogEntry) GetLoggedSuccessfully() bool {
	if x != nil {
		return x.LoggedSuccessfully
	}
	return false
}

type LogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

func (x *LogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_log_proto protoreflect.FileDescriptor

const file_log_proto_rawDesc = "" +
	"\n" +
	"\tlog.proto\x12\x03log\"\xdd\x04\n" +
	"\bLogEntry\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x1b\n" +
	"\texit_code\x18\x02 \x01(\x05R\bexitCode\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x1b\n" +
	"\tshell_PID\x18\x04 \x01(\x05R\bshellPID\x12!\n" +
	"\fshell_uptime\x18\x05 \x01(\x03R\vshellUptime\x12+\n" +
	"\x11working_directory\x18\x06 \x01(\tR\x10workingDirectory\x124\n" +
	"\x16prev_working_directory\x18\a \x01(\tR\x14prevWorkingDirectory\x12\x12\n" +
	"\x04user\x18\b \x01(\tR\x04user\x12\x12\n" +
	"\x04EUID\x18\t \x01(\x05R\x04EUID\x12\x12\n" +
	"\x04term\x18\n" +
	" \x01(\tR\x04term\x12\x1a\n" +
	"\bhostname\x18\v \x01(\tR\bhostname\x12\x1d\n" +
	"\n" +
	"SSH_client\x18\f \x01(\tR\tSSHClient\x12\x10\n" +
	"\x03TTY\x18\r \x01(\tR\x03TTY\x12\x1e\n" +
	"\vis_git_repo\x18\x0e \x01(\bR\tisGitRepo\x12\"\n" +
	"\rgit_repo_root\x18\x0f \x01(\tR\vgitRepoRoot\x12\x1d\n" +
	"\n" +
	"git_branch\x18\x10 \x01(\tR\tgitBranch\x12\x1d\n" +
	"\n" +
	"git_commit\x18\x11 \x01(\tR\tgitCommit\x12\x1d\n" +
	"\n" +
	"git_status\x18\x12 \x01(\tR\tgitStatus\x12/\n" +
	"\x13logged_successfully\x18\x13 \x01(\bR\x12loggedSuccessfully\"'\n" +
	"\vLogResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess24\n" +
	"\n" +
	"LogService\x12&\n" +
	"\x03Log\x12\r.log.LogEntry\x1a\x10.log.LogResponseB5Z3github.com/willrabalais/terminalLog/api/gen/log;logb\x06proto3"

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData []byte
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)))
	})
	return file_log_proto_rawDescData
}

var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_log_proto_goTypes = []any{
	(*LogEntry)(nil),    // 0: log.LogEntry
	(*LogResponse)(nil), // 1: log.LogResponse
}
var file_log_proto_depIdxs = []int32{
	0, // 0: log.LogService.Log:input_type -> log.LogEntry
	1, // 1: log.LogService.Log:output_type -> log.LogResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
