syntax = "proto3";

package log;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/willrabalais/terminalLog/api/gen/log;log";

message LogEntry {
  string event_id = 1;
  string command = 2;
  int32 exit_code = 3;
  int64 timestamp = 4;
  int32 shell_PID = 5;
  int64 shell_uptime = 6;
  string working_directory = 7;
  string prev_working_directory = 8;
  string user = 9;
  int32 EUID = 10;
  string term = 11;
  string hostname = 12;
  string SSH_client = 13;
  string TTY = 14;
  bool git_repo = 15;
  string git_repo_root = 16;
  string git_branch = 17;
  string git_commit = 18;
  string git_status = 19;
  bool logged_successfully = 20;
}

message FilterValues {
  repeated string values = 1;
}

enum FilterMode {
  FILTER_OR = 0;
  FILTER_AND = 1;
}

message SearchValues {
  repeated string values = 1;
}

enum SearchMode {
  SEARCH_OR = 0;
  SEARCH_AND = 1;
}

message LogFilter {
  map<string, FilterValues> filter_terms = 1;
  optional FilterMode filter_mode = 2;
  map<string, SearchValues> search_terms = 3;
  optional SearchMode search_mode = 4;
  
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;

  optional string order_by = 7;
  optional uint64 limit = 8;
  optional uint64 offset = 9;
}

message LogRequest {
  LogEntry entry = 1;
}

message LogResponse {
  bool success = 1;
  string event_id = 2;
}

message GetLogRequest {
  string event_id = 1;
}

message ListLogsRequest {
  LogFilter filter = 1;
}

message ListLogsResponse {
  repeated LogEntry logs = 1;
}

message DeleteLogRequest {
  string event_id = 1;
}

message DeleteLogResponse {
  bool success = 1;
  LogEntry deleted = 2;
}

message DeleteMultipleLogsRequest {
  LogFilter filter = 1;
}
message DeleteMultipleLogsResponse {
  bool success = 1;
  repeated LogEntry deleted = 2;
}

service LogService {
  rpc Log(LogRequest) returns (LogResponse);
  rpc GetLog(GetLogRequest) returns (LogEntry);
  rpc ListLogs(ListLogsRequest) returns (ListLogsResponse);
  rpc DeleteLog(DeleteLogRequest) returns (DeleteLogResponse);
  rpc DeleteMultipleLogs(DeleteMultipleLogsRequest) returns (DeleteMultipleLogsResponse);
}